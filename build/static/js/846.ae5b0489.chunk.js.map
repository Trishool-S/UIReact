{"version":3,"file":"static/js/846.ae5b0489.chunk.js","mappings":"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","sources":["app/components/common/alert-message-box/index.js","app/components/common/spinner/index.js","app/components/common/button/index.js","app/components/common/dropdown/index.js","app/components/common/dial-code-select/index.js","app/components/common/input/index.js","app/container/user-create/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport \"./alert.style.scss\";\r\n\r\nexport default function AlertMessage(props) {\r\n  const { isSuccess, message, onHideAlert, styles } = props;\r\n\r\n  /**\r\n   * hide alert after 5 sec\r\n   * pass hide alert props for clear message\r\n   */\r\n  useEffect(() => {\r\n    if (message.length > 0) {\r\n      setTimeout(() => {\r\n        onHideAlert();\r\n      }, 4000);\r\n    }\r\n  }, [message, onHideAlert]);\r\n\r\n  /**\r\n   * get alert varient like success or error\r\n   * @returns\r\n   */\r\n  const getAlertVariant = () => {\r\n    if (isSuccess) {\r\n      return \"success\";\r\n    } else {\r\n      return \"danger\";\r\n    }\r\n  };\r\n\r\n  const customStyle = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `alert-message ${styles}`;\r\n    }\r\n    return `alert-message`;\r\n  };\r\n\r\n  return (\r\n    <Alert\r\n      key={getAlertVariant()}\r\n      variant={getAlertVariant()}\r\n      show={message.length > 0 ? true : false}\r\n      className={customStyle()}\r\n      transition={false}\r\n    >\r\n      {`${message}`}\r\n    </Alert>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function CommonSpinner(props) {\r\n  const { isLoading, styles } = props;\r\n\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `${styles}`;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={customStyles()}>\r\n      <ClipLoader size={30} color=\"#2e8de6\" loading={isLoading} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./button.style.scss\";\r\n\r\nexport default function CommonButton(props) {\r\n  const { title, onClickedButton, styles } = props;\r\n\r\n  /**\r\n   * add custom style if get styles from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `btn-style ${styles}`;\r\n    }\r\n    return `btn-style`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <button className={customStyles()} onClick={onClickedButton}>\r\n      {`${title}`}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\n/**\r\n * This is common dropdown menu\r\n * you have to pass array for dropdown item\r\n * pass kItemName and kItemId if have object of array otherwise pass dont pass\r\n * placeholder\r\n * selectedItem\r\n * onSelectItem\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonDropDown(props) {\r\n  const {\r\n    listItem,\r\n    kItemName,\r\n    kItemId,\r\n    placeholder,\r\n    selectedItem,\r\n    onSelectItem,\r\n  } = props;\r\n\r\n  const renderDropdownItem = () => {\r\n    return listItem.map((item, index) => (\r\n      <Dropdown.Item\r\n        onClick={() => onSelectDropdown(item)}\r\n        key={index}\r\n        eventKey={typeof listItem === \"object\" ? item[[kItemId]] : item}\r\n      >\r\n        {typeof listItem === \"object\" ? item[[kItemName]] : item}\r\n      </Dropdown.Item>\r\n    ));\r\n  };\r\n\r\n  const renderPlaceholder = () => {\r\n    if (placeholder) {\r\n      return (\r\n        <Dropdown.Item\r\n          onClick={() => onSelectDropdown(placeholder)}\r\n          key={placeholder}\r\n          eventKey={placeholder}\r\n        >\r\n          {placeholder}\r\n        </Dropdown.Item>\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSelectDropdown = (e) => {\r\n    onSelectItem(e);\r\n  };\r\n\r\n  return (\r\n    <Dropdown className=\"\">\r\n      <Dropdown.Toggle id=\"dropdown-autoclose-true\">\r\n        {typeof selectedItem === \"object\"\r\n          ? selectedItem[[kItemName]]\r\n          : selectedItem}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {renderPlaceholder()}\r\n        {renderDropdownItem()}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n/***\r\n * Example\r\n * const renderAssetDropdown = () => {\r\n    return (\r\n      <div>\r\n        <label>Asset</label>\r\n        <CommonDropDown\r\n          listItem={[\r\n            { name: \"mumbai\", id: \"1\" },\r\n            { name: \"gujarat\", id: \"2\" },\r\n          ]}\r\n          kItemName=\"name\"\r\n          kItemId=\"id\"\r\n          placeholder=\"--ALL--\"\r\n          selectedItem={selectedAsset}\r\n          onSelectItem={(e) => setSelectedAsset(e)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n */\r\n","import React from \"react\";\r\nimport ListDialCode from \"../../../constants/dial-code.json\";\r\n\r\nexport default function CommonDialCodeSelector(props) {\r\n  const { selectedDialCode, onChangeDialCode } = props;\r\n  const renderOptionList = () => {\r\n    return ListDialCode.map((item, index) => (\r\n      <option\r\n        key={index}\r\n        value={item.dial_code}\r\n      >{`${item.name} ${item.dial_code}`}</option>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"countryCode\">\r\n      <select\r\n        onChange={(e) => onChangeDialCode(e.target.value)}\r\n        value={selectedDialCode}\r\n        name=\"dialCode\"\r\n        id=\"dialCode\"\r\n      >\r\n        {renderOptionList()}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./input.style.scss\";\r\n\r\n/**\r\n * common text input\r\n * pass below param\r\n * 1. value\r\n * 2. changetextinput\r\n * 3. txtId\r\n * 4. placeholdertext\r\n * 5. isPassword\r\n * 6. styles\r\n * 7. numberCharacter\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonTextInput(props) {\r\n  const {\r\n    value,\r\n    txtid,\r\n    placeholdertext,\r\n    isPassword,\r\n    changetextinput,\r\n    styles,\r\n    numberCharacter,\r\n  } = props;\r\n\r\n  /**\r\n   * add custom style if get style from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `txt-input ${styles}`;\r\n    }\r\n    return `txt-input`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <input\r\n      className={customStyles()}\r\n      placeholder={placeholdertext}\r\n      value={value}\r\n      onChange={(e) => {\r\n        e.preventDefault();\r\n        changetextinput(e.target.value);\r\n      }}\r\n      id={txtid}\r\n      type={isPassword === true ? \"password\" : \"text\"}\r\n      maxLength={numberCharacter !== undefined ? numberCharacter : 40}\r\n    />\r\n  );\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { ApiClient, ApiUser } from \"../../api\";\r\nimport {\r\n  CommonButton,\r\n  CommonDropDown,\r\n  CommonSpinner,\r\n  CommonTextInput,\r\n  CommonAlertMessage,\r\n  CommonDialCodeSelector,\r\n} from \"../../components/common\";\r\nimport InputFieldList from \"./input-field.json\";\r\nimport { RoutePath } from \"../../routes/route-path\";\r\nimport { apiCallForGetClientList } from \"../../store/reducer/client-list/client-list\";\r\nimport { Modal, Row, Col } from \"react-bootstrap\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nexport default function UserCreation() {\r\n  const [inputFieldInfo, setInputFieldInfo] = useState(InputFieldList);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n  const [isSuccessAlert, setIsSuccessAlert] = useState(true);\r\n  const [isLoadingAdd, setIsLoadingAdd] = useState(false);\r\n  const [isInputError, setIsInputError] = useState(false);\r\n  const [listEntity, setListEntity] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n  const [txtPassword, setTxtPassword] = useState(\"\");\r\n  const [txtEmail, setTxtEmail] = useState(\"\");\r\n  const [isCopy, setIsCopy] = useState(false);\r\n  const [selectedContactNo, setSelectedContactNo] = useState(\"+91\");\r\n\r\n  //useState\r\n  const { loginInfo } = useSelector((state) => state.rLogin);\r\n  const { listClient } = useSelector((state) => state.rClientList);\r\n\r\n  // search\r\n  const [searchParams] = useSearchParams();\r\n\r\n  // List of Type\r\n  const listOfType = [\r\n    {\r\n      id: 1,\r\n      name: \"SuperAdmin\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"ClientAdmin\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Customer\",\r\n    },\r\n  ];\r\n\r\n  //dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  //navigation\r\n  const navigation = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (loginInfo && loginInfo.user.type === \"ClientAdmin\") {\r\n      navigation(RoutePath.dashboard);\r\n      return;\r\n    }\r\n\r\n    apiCallGetClientDetails(searchParams.get(\"clientid\"));\r\n    InputFieldList.map((item, index) => {\r\n      if (item.key === \"clientId\") {\r\n        onChangeTextInput(item, index);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(apiCallForGetClientList());\r\n  }, []);\r\n\r\n  const renderInputField = () => {\r\n    return inputFieldInfo.map((item, index) => (\r\n      <div key={index} className=\"div-input-create-client\">\r\n        <label className=\"lbl-create-title\">{item.label}</label>\r\n        {item.key === \"phoneNumber\" && (\r\n          <CommonDialCodeSelector\r\n            selectedDialCode={selectedContactNo}\r\n            onChangeDialCode={(e) => setSelectedContactNo(e)}\r\n          />\r\n        )}\r\n        {item.type && item.type === \"dropdown\" ? (\r\n          <CommonDropDown\r\n            listItem={\r\n              item.key === \"type\"\r\n                ? listOfType\r\n                : item.key === \"clientId\"\r\n                ? getSelectedClientList()\r\n                : listEntity\r\n            }\r\n            kItemName=\"name\"\r\n            kItemId=\"id\"\r\n            placeholder=\"--Select--\"\r\n            selectedItem={\r\n              item.key === \"clientId\" ? getSelectedClientList()[0] : item.value\r\n            }\r\n            onSelectItem={(e) => {\r\n              onChangeTextInput(e !== \"--Select--\" ? e : \"--Select--\", index);\r\n              if (item.key === \"clientId\" && e !== \"--Select--\") {\r\n                apiCallGetClientDetails(e.id);\r\n              }\r\n            }}\r\n          />\r\n        ) : item.type && item.type === \"switch\" ? (\r\n          <div className=\"inputBox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              onChange={(e) => onChangeTextInput(!item.value, index)}\r\n            />\r\n            <label>Allow</label>\r\n          </div>\r\n        ) : (\r\n          <CommonTextInput\r\n            placeholdertext={item.lable}\r\n            value={item.value}\r\n            changetextinput={(e) => onChangeTextInput(e, index)}\r\n            id={item.key}\r\n          />\r\n        )}\r\n        {isInputError && item.isRequire && item.value.length <= 0 && (\r\n          <p className=\"input-error-msg\">{`${item.errMsg}`}</p>\r\n        )}\r\n        {item.type === \"dropdown\" &&\r\n          item.value === \"--Select--\" &&\r\n          isInputError && <p className=\"input-error-msg\">{`${item.errMsg}`}</p>}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const getSelectedClientList = () => {\r\n    const filterArr = listClient.filter(\r\n      (e) => e.id === searchParams.get(\"clientid\")\r\n    );\r\n    return filterArr;\r\n  };\r\n\r\n  const apiCallGetClientDetails = (clientId) => {\r\n    setIsLoading(true);\r\n    ApiClient()\r\n      .apiCallForGetClientDetails(clientId, loginInfo.token.idToken)\r\n      .then((res) => {\r\n        setIsLoading(false);\r\n        if (\r\n          res.client &&\r\n          res.client.entities &&\r\n          Array.isArray(res.client.entities)\r\n        ) {\r\n          setListEntity(res.client.entities);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const onChangeTextInput = (value, index) => {\r\n    let arrInput = [...inputFieldInfo];\r\n    let info = arrInput[index];\r\n    info.value = value;\r\n    setInputFieldInfo(arrInput);\r\n  };\r\n\r\n  const btnSubmitClicked = () => {\r\n    if (!isLoadingAdd) {\r\n      let dictRequBody = {};\r\n      let isValideInput = true;\r\n      inputFieldInfo.forEach((item) => {\r\n        if (item.type === \"dropdown\") {\r\n          dictRequBody[item.key] =\r\n            item.value !== \"--Select--\" ? item.value.id : \"\";\r\n        } else {\r\n          if (item.key === \"phoneNumber\") {\r\n            dictRequBody[item.key] = `${selectedContactNo}${item.value}`;\r\n          } else {\r\n            dictRequBody[item.key] = item.value;\r\n          }\r\n        }\r\n        if (\r\n          (item.isRequire && item.value.length <= 0) ||\r\n          item.value === \"--Select--\"\r\n        ) {\r\n          isValideInput = false;\r\n        }\r\n      });\r\n      dictRequBody.clientId = searchParams.get(\"clientid\");\r\n      if (!isValideInput) {\r\n        setIsInputError(true);\r\n        return;\r\n      }\r\n      setIsInputError(false);\r\n      setIsLoadingAdd(true);\r\n      ApiUser()\r\n        .apiCallForAddNewUser(dictRequBody, loginInfo.token.idToken)\r\n        .then((res) => {\r\n          setInputFieldInfo(InputFieldList);\r\n          setIsLoadingAdd(false);\r\n          setIsSuccessAlert(true);\r\n          setAlertMessage(\"User Created Successfully\");\r\n          setTxtPassword(res.password);\r\n          setTxtEmail(res.user.email);\r\n          setIsShowModal(true);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoadingAdd(false);\r\n          setIsSuccessAlert(false);\r\n          setAlertMessage(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const renderAlertMessage = () => {\r\n    return (\r\n      <CommonAlertMessage\r\n        isSuccess={isSuccessAlert}\r\n        message={alertMessage}\r\n        onHideAlert={() => setAlertMessage(\"\")}\r\n        styles=\"login-alert-box\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderModalSuccessClient = () => {\r\n    if (isShowModal) {\r\n      return (\r\n        <Modal\r\n          show={isShowModal}\r\n          onHide={() => {\r\n            navigation(RoutePath.dashboard);\r\n          }}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Success</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            User Created Successfully!\r\n            <div>\r\n              <label>\r\n                Email: <strong>{txtEmail}</strong>\r\n              </label>\r\n              <p>\r\n                Password: <strong>{txtPassword}</strong>\r\n              </p>\r\n            </div>\r\n            <button\r\n              onClick={() => {\r\n                setIsCopy(true);\r\n                copy(txtPassword);\r\n                setTimeout(() => {\r\n                  setIsCopy(false);\r\n                }, 3000);\r\n              }}\r\n              className={\r\n                isCopy\r\n                  ? \"copy-password-btn copy-password-btn-active\"\r\n                  : \"copy-password-btn\"\r\n              }\r\n            >\r\n              Click here to Copy Password\r\n            </button>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <CommonButton\r\n              onClickedButton={() =>\r\n                navigation(\r\n                  `${RoutePath.userManagement}?clientid=${searchParams.get(\r\n                    \"clientid\"\r\n                  )}`\r\n                )\r\n              }\r\n              title=\"Continue\"\r\n              styles=\"btn-create-submit\"\r\n            />\r\n          </Modal.Footer>\r\n        </Modal>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"div-dashboard\">\r\n      <h4 className=\"headingAll mt-4 mb-0\">User Creation</h4>\r\n      <div className=\"div-create-client-inner\">\r\n        <Row>\r\n          <Col xxl={6} lg={6} sm={12} className=\"my-2\">\r\n            <div className=\"formOne\">\r\n              {renderInputField()}\r\n              {renderAlertMessage()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        {!isLoadingAdd && (\r\n          <CommonButton\r\n            onClickedButton={btnSubmitClicked}\r\n            title=\"Submit\"\r\n            styles=\"btn-create-submit\"\r\n          />\r\n        )}\r\n        {isLoadingAdd && (\r\n          <CommonSpinner styles=\"btn-spinner\" isLoading={isLoadingAdd} />\r\n        )}\r\n        {/* {isLoading && (\r\n          <CommonSpinner styles=\"btn-spinner\" isLoading={isLoading} />\r\n        )} */}\r\n      </div>\r\n      {renderModalSuccessClient()}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["AlertMessage","props","isSuccess","message","onHideAlert","styles","useEffect","length","setTimeout","getAlertVariant","Alert","variant","show","className","transition","CommonSpinner","isLoading","ClipLoader","size","color","loading","CommonButton","title","onClickedButton","onClick","CommonDropDown","listItem","kItemName","kItemId","placeholder","selectedItem","onSelectItem","onSelectDropdown","e","Dropdown","id","eventKey","renderPlaceholder","map","item","index","CommonDialCodeSelector","selectedDialCode","onChangeDialCode","onChange","target","value","name","ListDialCode","dial_code","CommonTextInput","txtid","placeholdertext","isPassword","changetextinput","numberCharacter","preventDefault","type","maxLength","undefined","UserCreation","useState","InputFieldList","inputFieldInfo","setInputFieldInfo","alertMessage","setAlertMessage","isSuccessAlert","setIsSuccessAlert","isLoadingAdd","setIsLoadingAdd","isInputError","setIsInputError","listEntity","setListEntity","setIsLoading","isShowModal","setIsShowModal","txtPassword","setTxtPassword","txtEmail","setTxtEmail","isCopy","setIsCopy","selectedContactNo","setSelectedContactNo","loginInfo","useSelector","state","rLogin","listClient","rClientList","useSearchParams","searchParams","listOfType","dispatch","useDispatch","navigation","useNavigate","user","RoutePath","apiCallGetClientDetails","get","key","onChangeTextInput","apiCallForGetClientList","getSelectedClientList","filter","clientId","ApiClient","apiCallForGetClientDetails","token","idToken","then","res","client","entities","Array","isArray","catch","err","arrInput","Row","Col","xxl","lg","sm","label","lable","isRequire","errMsg","dictRequBody","isValideInput","forEach","ApiUser","apiCallForAddNewUser","password","email","Modal","onHide","closeButton","copy","renderModalSuccessClient"],"sourceRoot":""}