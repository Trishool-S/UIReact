{"version":3,"file":"static/js/502.bd153b82.chunk.js","mappings":"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","sources":["app/components/common/alert-message-box/index.js","app/components/common/spinner/index.js","app/components/common/button/index.js","app/components/common/dropdown/index.js","app/components/common/dial-code-select/index.js","app/components/common/input/index.js","app/components/super-admin/common-top-button.js","app/container/user-management/index.js","app/container/user-management/user-mng-presenter.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport \"./alert.style.scss\";\r\n\r\nexport default function AlertMessage(props) {\r\n  const { isSuccess, message, onHideAlert, styles } = props;\r\n\r\n  /**\r\n   * hide alert after 5 sec\r\n   * pass hide alert props for clear message\r\n   */\r\n  useEffect(() => {\r\n    if (message.length > 0) {\r\n      setTimeout(() => {\r\n        onHideAlert();\r\n      }, 4000);\r\n    }\r\n  }, [message, onHideAlert]);\r\n\r\n  /**\r\n   * get alert varient like success or error\r\n   * @returns\r\n   */\r\n  const getAlertVariant = () => {\r\n    if (isSuccess) {\r\n      return \"success\";\r\n    } else {\r\n      return \"danger\";\r\n    }\r\n  };\r\n\r\n  const customStyle = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `alert-message ${styles}`;\r\n    }\r\n    return `alert-message`;\r\n  };\r\n\r\n  return (\r\n    <Alert\r\n      key={getAlertVariant()}\r\n      variant={getAlertVariant()}\r\n      show={message.length > 0 ? true : false}\r\n      className={customStyle()}\r\n      transition={false}\r\n    >\r\n      {`${message}`}\r\n    </Alert>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function CommonSpinner(props) {\r\n  const { isLoading, styles } = props;\r\n\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `${styles}`;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={customStyles()}>\r\n      <ClipLoader size={30} color=\"#2e8de6\" loading={isLoading} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./button.style.scss\";\r\n\r\nexport default function CommonButton(props) {\r\n  const { title, onClickedButton, styles } = props;\r\n\r\n  /**\r\n   * add custom style if get styles from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `btn-style ${styles}`;\r\n    }\r\n    return `btn-style`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <button className={customStyles()} onClick={onClickedButton}>\r\n      {`${title}`}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\n/**\r\n * This is common dropdown menu\r\n * you have to pass array for dropdown item\r\n * pass kItemName and kItemId if have object of array otherwise pass dont pass\r\n * placeholder\r\n * selectedItem\r\n * onSelectItem\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonDropDown(props) {\r\n  const {\r\n    listItem,\r\n    kItemName,\r\n    kItemId,\r\n    placeholder,\r\n    selectedItem,\r\n    onSelectItem,\r\n  } = props;\r\n\r\n  const renderDropdownItem = () => {\r\n    return listItem.map((item, index) => (\r\n      <Dropdown.Item\r\n        onClick={() => onSelectDropdown(item)}\r\n        key={index}\r\n        eventKey={typeof listItem === \"object\" ? item[[kItemId]] : item}\r\n      >\r\n        {typeof listItem === \"object\" ? item[[kItemName]] : item}\r\n      </Dropdown.Item>\r\n    ));\r\n  };\r\n\r\n  const renderPlaceholder = () => {\r\n    if (placeholder) {\r\n      return (\r\n        <Dropdown.Item\r\n          onClick={() => onSelectDropdown(placeholder)}\r\n          key={placeholder}\r\n          eventKey={placeholder}\r\n        >\r\n          {placeholder}\r\n        </Dropdown.Item>\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSelectDropdown = (e) => {\r\n    onSelectItem(e);\r\n  };\r\n\r\n  return (\r\n    <Dropdown className=\"\">\r\n      <Dropdown.Toggle id=\"dropdown-autoclose-true\">\r\n        {typeof selectedItem === \"object\"\r\n          ? selectedItem[[kItemName]]\r\n          : selectedItem}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {renderPlaceholder()}\r\n        {renderDropdownItem()}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n/***\r\n * Example\r\n * const renderAssetDropdown = () => {\r\n    return (\r\n      <div>\r\n        <label>Asset</label>\r\n        <CommonDropDown\r\n          listItem={[\r\n            { name: \"mumbai\", id: \"1\" },\r\n            { name: \"gujarat\", id: \"2\" },\r\n          ]}\r\n          kItemName=\"name\"\r\n          kItemId=\"id\"\r\n          placeholder=\"--ALL--\"\r\n          selectedItem={selectedAsset}\r\n          onSelectItem={(e) => setSelectedAsset(e)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n */\r\n","import React from \"react\";\r\nimport ListDialCode from \"../../../constants/dial-code.json\";\r\n\r\nexport default function CommonDialCodeSelector(props) {\r\n  const { selectedDialCode, onChangeDialCode } = props;\r\n  const renderOptionList = () => {\r\n    return ListDialCode.map((item, index) => (\r\n      <option\r\n        key={index}\r\n        value={item.dial_code}\r\n      >{`${item.name} ${item.dial_code}`}</option>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"countryCode\">\r\n      <select\r\n        onChange={(e) => onChangeDialCode(e.target.value)}\r\n        value={selectedDialCode}\r\n        name=\"dialCode\"\r\n        id=\"dialCode\"\r\n      >\r\n        {renderOptionList()}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./input.style.scss\";\r\n\r\n/**\r\n * common text input\r\n * pass below param\r\n * 1. value\r\n * 2. changetextinput\r\n * 3. txtId\r\n * 4. placeholdertext\r\n * 5. isPassword\r\n * 6. styles\r\n * 7. numberCharacter\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonTextInput(props) {\r\n  const {\r\n    value,\r\n    txtid,\r\n    placeholdertext,\r\n    isPassword,\r\n    changetextinput,\r\n    styles,\r\n    numberCharacter,\r\n  } = props;\r\n\r\n  /**\r\n   * add custom style if get style from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `txt-input ${styles}`;\r\n    }\r\n    return `txt-input`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <input\r\n      className={customStyles()}\r\n      placeholder={placeholdertext}\r\n      value={value}\r\n      onChange={(e) => {\r\n        e.preventDefault();\r\n        changetextinput(e.target.value);\r\n      }}\r\n      id={txtid}\r\n      type={isPassword === true ? \"password\" : \"text\"}\r\n      maxLength={numberCharacter !== undefined ? numberCharacter : 40}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { RoutePath } from \"../../routes/route-path\";\r\nimport { CommonButton } from \"../common\";\r\n\r\nexport default function TopButtonSuperAdmin(_props) {\r\n  const btnClicked = (routeName) => {\r\n    _props.navigate(routeName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div-top-btn\">\r\n      <CommonButton\r\n        styles=\"btn-super-top\"\r\n        title=\"Client\"\r\n        onClickedButton={() => btnClicked(RoutePath.dashboard)}\r\n      />\r\n      <CommonButton\r\n        styles=\"btn-super-top\"\r\n        title=\"User\"\r\n        onClickedButton={() => btnClicked(RoutePath.userManagement)}\r\n      />\r\n      <CommonButton styles=\"btn-super-top\" title=\"Help\" />\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { lazy, useEffect, useState } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { ApiClient, ApiUser } from \"../../api\";\r\nimport { CommonButton, CommonDropDown } from \"../../components/common\";\r\nimport TopButtonSuperAdmin from \"../../components/super-admin/common-top-button\";\r\nimport { RoutePath } from \"../../routes/route-path\";\r\nimport { UserManagementPresenter } from \"./user-mng-presenter\";\r\n\r\nconst ExistingAdminDetails = lazy(() =>\r\n  import(\"../../components/user-management/existing-admin-details\")\r\n);\r\n\r\nexport default function UserManagement() {\r\n  //state declaration\r\n  const [selectedClient, setSelectedClient] = useState(\"--Select--\");\r\n  const [listClients, setListClients] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [listUser, setListUser] = useState([]);\r\n\r\n  //navigation\r\n  const navigate = useNavigate();\r\n\r\n  //use selector\r\n  const { loginInfo } = useSelector((state) => state.rLogin);\r\n\r\n  // search\r\n  const [searchParams] = useSearchParams();\r\n\r\n  useEffect(() => {\r\n    if (loginInfo && loginInfo.user.type === \"ClientAdmin\") {\r\n      navigate(RoutePath.dashboard);\r\n      return;\r\n    }\r\n    apiCallForGetClientList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      Object.keys(selectedClient).length > 0 &&\r\n      selectedClient !== \"--Select--\"\r\n    ) {\r\n      apiCallForGetUserListByClientId();\r\n    }\r\n  }, [selectedClient]);\r\n\r\n  /**\r\n   * Get user list base on client id\r\n   */\r\n  const apiCallForGetUserListByClientId = () => {\r\n    setIsLoading(true);\r\n\r\n    ApiUser()\r\n      .apiCallForGetUserList(\r\n        `?clientid=${selectedClient.id}`,\r\n        loginInfo.token.idToken\r\n      )\r\n      .then((response) => {\r\n        setIsLoading(false);\r\n        setListUser(response);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * get client list\r\n   */\r\n  const apiCallForGetClientList = () => {\r\n    ApiClient()\r\n      .apiCallForGetClientList(loginInfo.token.idToken)\r\n      .then((res) => {\r\n        setIsLoading(false);\r\n        if (res.length > 0) {\r\n          if (searchParams.get(\"clientid\") !== null) {\r\n            let filterArr = res.filter(\r\n              (e) => e.id === searchParams.get(\"clientid\")\r\n            );\r\n            if (filterArr.length > 0) {\r\n              setSelectedClient(filterArr[0]);\r\n            } else {\r\n              setSelectedClient(res[0]);\r\n            }\r\n          } else {\r\n            setSelectedClient(res[0]);\r\n          }\r\n          const listData = UserManagementPresenter().listOfClientDropdown(res);\r\n          setListClients((preview) => (preview = listData));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const renderTopButton = () => {\r\n    return <TopButtonSuperAdmin navigate={navigate} />;\r\n  };\r\n\r\n  /**\r\n   * client list show in dropdown\r\n   * @returns\r\n   */\r\n  const renderClientDropdown = () => {\r\n    if (listClients.length > 0) {\r\n      return (\r\n        <CommonDropDown\r\n          listItem={listClients}\r\n          kItemName=\"name\"\r\n          kItemId=\"id\"\r\n          placeholder=\"--Select--\"\r\n          selectedItem={selectedClient}\r\n          onSelectItem={(e) => {\r\n            setSelectedClient(e);\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <div className=\"div-dashboard\">\r\n      <div className=\"bradcramHeading\">\r\n        <Row>\r\n          <Col lg={4}>\r\n            <h2 className=\"headingAll mt-2 mb-0\">Existing User Details</h2>\r\n          </Col>\r\n          <Col lg={8} className=\"text-right\">\r\n            {renderTopButton()}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n      <Row className=\" mb-3\">\r\n        <Col xl={6} lg={6} md={6}>\r\n          <div className=\"selectClient\">\r\n            <label className=\"mt-0\">select Client Name</label>\r\n            {renderClientDropdown()}\r\n          </div>\r\n        </Col>\r\n        <Col xl={6} lg={6} md={6} className=\"text-end\">\r\n          {/* <CommonButton styles=\"btn-create-client\" title=\"Reset Password\" /> */}\r\n          {/* <CommonButton styles=\"btn-create-client\" title=\"Delete\" /> */}\r\n          <CommonButton\r\n            onClickedButton={() =>\r\n              navigate(`${RoutePath.userCreate}?clientid=${selectedClient.id}`)\r\n            }\r\n            styles=\"btn-create-client\"\r\n            title=\"Create New User\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <ExistingAdminDetails listUser={listUser} isLoading={isLoading} />\r\n    </div>\r\n  );\r\n}\r\n","export const UserManagementPresenter = () => {\r\n  const listOfClientDropdown = (listData) => {\r\n    let listClient = [];\r\n    for (let i = 0; i < listData.length; i++) {\r\n      listClient.push({ name: listData[i][\"name\"], id: listData[i][\"id\"] });\r\n    }\r\n    return listClient;\r\n  };\r\n  return {\r\n    listOfClientDropdown,\r\n  };\r\n};\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{ ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, { ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["AlertMessage","props","isSuccess","message","onHideAlert","styles","useEffect","length","setTimeout","getAlertVariant","Alert","variant","show","className","transition","CommonSpinner","isLoading","ClipLoader","size","color","loading","CommonButton","title","onClickedButton","onClick","CommonDropDown","listItem","kItemName","kItemId","placeholder","selectedItem","onSelectItem","onSelectDropdown","e","Dropdown","id","eventKey","renderPlaceholder","map","item","index","CommonDialCodeSelector","selectedDialCode","onChangeDialCode","onChange","target","value","name","ListDialCode","dial_code","CommonTextInput","txtid","placeholdertext","isPassword","changetextinput","numberCharacter","preventDefault","type","maxLength","undefined","TopButtonSuperAdmin","_props","btnClicked","routeName","navigate","RoutePath","ExistingAdminDetails","lazy","UserManagement","useState","selectedClient","setSelectedClient","listClients","setListClients","setIsLoading","listUser","setListUser","useNavigate","loginInfo","useSelector","state","rLogin","useSearchParams","searchParams","user","apiCallForGetClientList","Object","keys","apiCallForGetUserListByClientId","ApiUser","apiCallForGetUserList","token","idToken","then","response","catch","err","ApiClient","res","get","filterArr","filter","listData","listClient","i","push","UserManagementPresenter","preview","Row","Col","lg","xl","md","renderClientDropdown","React","ref","as","bsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","spans","classes","forEach","brkPoint","span","offset","order","propValue","infix","classNames","useCol","colProps","Component","_jsx","displayName","decoratedBsPrefix","sizePrefix","cols"],"sourceRoot":""}