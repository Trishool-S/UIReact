{"version":3,"file":"static/js/854.8a3dd226.chunk.js","mappings":"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","sources":["app/components/common/alert-message-box/index.js","app/components/common/spinner/index.js","app/components/common/button/index.js","app/components/common/dropdown/index.js","app/components/common/dial-code-select/index.js","app/components/common/input/index.js","app/container/entity-group-creation/index.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport \"./alert.style.scss\";\r\n\r\nexport default function AlertMessage(props) {\r\n  const { isSuccess, message, onHideAlert, styles } = props;\r\n\r\n  /**\r\n   * hide alert after 5 sec\r\n   * pass hide alert props for clear message\r\n   */\r\n  useEffect(() => {\r\n    if (message.length > 0) {\r\n      setTimeout(() => {\r\n        onHideAlert();\r\n      }, 4000);\r\n    }\r\n  }, [message, onHideAlert]);\r\n\r\n  /**\r\n   * get alert varient like success or error\r\n   * @returns\r\n   */\r\n  const getAlertVariant = () => {\r\n    if (isSuccess) {\r\n      return \"success\";\r\n    } else {\r\n      return \"danger\";\r\n    }\r\n  };\r\n\r\n  const customStyle = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `alert-message ${styles}`;\r\n    }\r\n    return `alert-message`;\r\n  };\r\n\r\n  return (\r\n    <Alert\r\n      key={getAlertVariant()}\r\n      variant={getAlertVariant()}\r\n      show={message.length > 0 ? true : false}\r\n      className={customStyle()}\r\n      transition={false}\r\n    >\r\n      {`${message}`}\r\n    </Alert>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function CommonSpinner(props) {\r\n  const { isLoading, styles } = props;\r\n\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `${styles}`;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={customStyles()}>\r\n      <ClipLoader size={30} color=\"#2e8de6\" loading={isLoading} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./button.style.scss\";\r\n\r\nexport default function CommonButton(props) {\r\n  const { title, onClickedButton, styles } = props;\r\n\r\n  /**\r\n   * add custom style if get styles from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `btn-style ${styles}`;\r\n    }\r\n    return `btn-style`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <button className={customStyles()} onClick={onClickedButton}>\r\n      {`${title}`}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\n/**\r\n * This is common dropdown menu\r\n * you have to pass array for dropdown item\r\n * pass kItemName and kItemId if have object of array otherwise pass dont pass\r\n * placeholder\r\n * selectedItem\r\n * onSelectItem\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonDropDown(props) {\r\n  const {\r\n    listItem,\r\n    kItemName,\r\n    kItemId,\r\n    placeholder,\r\n    selectedItem,\r\n    onSelectItem,\r\n  } = props;\r\n\r\n  const renderDropdownItem = () => {\r\n    return listItem.map((item, index) => (\r\n      <Dropdown.Item\r\n        onClick={() => onSelectDropdown(item)}\r\n        key={index}\r\n        eventKey={typeof listItem === \"object\" ? item[[kItemId]] : item}\r\n      >\r\n        {typeof listItem === \"object\" ? item[[kItemName]] : item}\r\n      </Dropdown.Item>\r\n    ));\r\n  };\r\n\r\n  const renderPlaceholder = () => {\r\n    if (placeholder) {\r\n      return (\r\n        <Dropdown.Item\r\n          onClick={() => onSelectDropdown(placeholder)}\r\n          key={placeholder}\r\n          eventKey={placeholder}\r\n        >\r\n          {placeholder}\r\n        </Dropdown.Item>\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSelectDropdown = (e) => {\r\n    onSelectItem(e);\r\n  };\r\n\r\n  return (\r\n    <Dropdown className=\"\">\r\n      <Dropdown.Toggle id=\"dropdown-autoclose-true\">\r\n        {typeof selectedItem === \"object\"\r\n          ? selectedItem[[kItemName]]\r\n          : selectedItem}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {renderPlaceholder()}\r\n        {renderDropdownItem()}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n/***\r\n * Example\r\n * const renderAssetDropdown = () => {\r\n    return (\r\n      <div>\r\n        <label>Asset</label>\r\n        <CommonDropDown\r\n          listItem={[\r\n            { name: \"mumbai\", id: \"1\" },\r\n            { name: \"gujarat\", id: \"2\" },\r\n          ]}\r\n          kItemName=\"name\"\r\n          kItemId=\"id\"\r\n          placeholder=\"--ALL--\"\r\n          selectedItem={selectedAsset}\r\n          onSelectItem={(e) => setSelectedAsset(e)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n */\r\n","import React from \"react\";\r\nimport ListDialCode from \"../../../constants/dial-code.json\";\r\n\r\nexport default function CommonDialCodeSelector(props) {\r\n  const { selectedDialCode, onChangeDialCode } = props;\r\n  const renderOptionList = () => {\r\n    return ListDialCode.map((item, index) => (\r\n      <option\r\n        key={index}\r\n        value={item.dial_code}\r\n      >{`${item.name} ${item.dial_code}`}</option>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"countryCode\">\r\n      <select\r\n        onChange={(e) => onChangeDialCode(e.target.value)}\r\n        value={selectedDialCode}\r\n        name=\"dialCode\"\r\n        id=\"dialCode\"\r\n      >\r\n        {renderOptionList()}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./input.style.scss\";\r\n\r\n/**\r\n * common text input\r\n * pass below param\r\n * 1. value\r\n * 2. changetextinput\r\n * 3. txtId\r\n * 4. placeholdertext\r\n * 5. isPassword\r\n * 6. styles\r\n * 7. numberCharacter\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonTextInput(props) {\r\n  const {\r\n    value,\r\n    txtid,\r\n    placeholdertext,\r\n    isPassword,\r\n    changetextinput,\r\n    styles,\r\n    numberCharacter,\r\n  } = props;\r\n\r\n  /**\r\n   * add custom style if get style from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `txt-input ${styles}`;\r\n    }\r\n    return `txt-input`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <input\r\n      className={customStyles()}\r\n      placeholder={placeholdertext}\r\n      value={value}\r\n      onChange={(e) => {\r\n        e.preventDefault();\r\n        changetextinput(e.target.value);\r\n      }}\r\n      id={txtid}\r\n      type={isPassword === true ? \"password\" : \"text\"}\r\n      maxLength={numberCharacter !== undefined ? numberCharacter : 40}\r\n    />\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { ApiEntityGroup } from \"../../api\";\r\nimport {\r\n  CommonButton,\r\n  CommonDropDown,\r\n  CommonSpinner,\r\n  CommonTextInput,\r\n  CommonAlertMessage,\r\n} from \"../../components/common\";\r\nimport InputFieldList from \"./input-field.json\";\r\nimport { RoutePath } from \"../../routes/route-path\";\r\nimport { apiCallForGetEntityGroupList } from \"../../store/reducer/entity-landing/entity-group-list\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function EntityGroupCreation() {\r\n  const [inputFieldInfo, setInputFieldInfo] = useState(InputFieldList);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n  const [isSuccessAlert, setIsSuccessAlert] = useState(true);\r\n  const [isLoadingAdd, setIsLoadingAdd] = useState(false);\r\n  const [isInputError, setIsInputError] = useState(false);\r\n  //useState\r\n  const { listEntityGroup, isLoading } = useSelector(\r\n    (state) => state.rEntityGroupList\r\n  );\r\n  const { loginInfo } = useSelector((state) => state.rLogin);\r\n\r\n  //dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  //navigation\r\n  const navigation = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (loginInfo && loginInfo.user.type === \"SuperAdmin\") {\r\n      navigation(RoutePath.dashboard);\r\n      return;\r\n    }\r\n    dispatch(apiCallForGetEntityGroupList());\r\n  }, []);\r\n\r\n  const renderInputField = () => {\r\n    if (!isLoading) {\r\n      return inputFieldInfo.map((item, index) => (\r\n        <div key={index} className=\"div-input-create-client\">\r\n          <label className=\"lbl-create-title\">{item.label}</label>\r\n          {item.type && item.type === \"dropdown\" ? (\r\n            <CommonDropDown\r\n              listItem={listEntityGroup}\r\n              kItemName=\"name\"\r\n              kItemId=\"id\"\r\n              placeholder=\"--Select--\"\r\n              selectedItem={item.value}\r\n              onSelectItem={(e) =>\r\n                onChangeTextInput(e !== \"--Select--\" ? e : \"--Select--\", index)\r\n              }\r\n            />\r\n          ) : item.type && item.type === \"switch\" ? (\r\n            <div className=\"inputBox\">\r\n              <input\r\n                type=\"checkbox\"\r\n                onChange={(e) => onChangeTextInput(!item.value, index)}\r\n              />\r\n              <label>Allow</label>\r\n            </div>\r\n          ) : (\r\n            <CommonTextInput\r\n              placeholdertext={item.lable}\r\n              value={item.value}\r\n              changetextinput={(e) => onChangeTextInput(e, index)}\r\n              id={item.key}\r\n            />\r\n          )}\r\n          {(isInputError && item.isRequire && item.value.length <= 0) ||\r\n            (item.type === \"dropdown\" &&\r\n              item.value === \"--Select--\" &&\r\n              isInputError && (\r\n                <p className=\"input-error-msg\">{`${item.errMsg}`}</p>\r\n              ))}\r\n        </div>\r\n      ));\r\n    }\r\n  };\r\n\r\n  const onChangeTextInput = (value, index) => {\r\n    let arrInput = [...inputFieldInfo];\r\n    let info = arrInput[index];\r\n    info.value = value;\r\n    setInputFieldInfo(arrInput);\r\n  };\r\n\r\n  const btnSubmitClicked = () => {\r\n    if (!isLoadingAdd) {\r\n      let dictRequBody = {};\r\n      let isValideInput = true;\r\n      inputFieldInfo.forEach((item) => {\r\n        if (item.type === \"dropdown\") {\r\n          dictRequBody[item.key] =\r\n            item.value !== \"--Select--\" ? item.value.id : \"\";\r\n        } else {\r\n          dictRequBody[item.key] = item.value;\r\n        }\r\n        if (\r\n          (item.isRequire && item.value.length <= 0) ||\r\n          item.value === \"--Select--\"\r\n        ) {\r\n          isValideInput = false;\r\n        }\r\n      });\r\n      if (!isValideInput) {\r\n        setIsInputError(true);\r\n        return;\r\n      }\r\n      setIsInputError(false);\r\n      setIsLoadingAdd(true);\r\n      ApiEntityGroup()\r\n        .apiCallForAddNewEntityGroup(dictRequBody, loginInfo.token.idToken)\r\n        .then((res) => {\r\n          setInputFieldInfo(InputFieldList);\r\n          setIsLoadingAdd(false);\r\n          setIsSuccessAlert(true);\r\n          setAlertMessage(\"Entity group Created Successfully\");\r\n          setTimeout(() => {\r\n            navigation(RoutePath.entityGroupManagement);\r\n          }, 4000);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoadingAdd(false);\r\n          setIsSuccessAlert(false);\r\n          setAlertMessage(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const renderAlertMessage = () => {\r\n    return (\r\n      <CommonAlertMessage\r\n        isSuccess={isSuccessAlert}\r\n        message={alertMessage}\r\n        onHideAlert={() => setAlertMessage(\"\")}\r\n        styles=\"login-alert-box\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"div-dashboard\">\r\n      <h4 className=\"headingAll mt-4 mb-0\">Entity Group Creation</h4>\r\n      <div className=\"div-create-client-inner\">\r\n        <Row>\r\n          <Col xxl={6} lg={6} sm={12} className=\"my-2\">\r\n            <div className=\"formOne\">\r\n              {renderInputField()}\r\n              {renderAlertMessage()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        {!isLoadingAdd && (\r\n          <CommonButton\r\n            onClickedButton={btnSubmitClicked}\r\n            title=\"Submit\"\r\n            styles=\"btn-create-submit\"\r\n          />\r\n        )}\r\n        {isLoadingAdd && (\r\n          <CommonSpinner styles=\"btn-spinner\" isLoading={isLoadingAdd} />\r\n        )}\r\n        {isLoading && (\r\n          <CommonSpinner styles=\"btn-spinner\" isLoading={isLoading} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{ ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, { ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["AlertMessage","props","isSuccess","message","onHideAlert","styles","useEffect","length","setTimeout","getAlertVariant","Alert","variant","show","className","transition","CommonSpinner","isLoading","ClipLoader","size","color","loading","CommonButton","title","onClickedButton","onClick","CommonDropDown","listItem","kItemName","kItemId","placeholder","selectedItem","onSelectItem","onSelectDropdown","e","Dropdown","id","eventKey","renderPlaceholder","map","item","index","CommonDialCodeSelector","selectedDialCode","onChangeDialCode","onChange","target","value","name","ListDialCode","dial_code","CommonTextInput","txtid","placeholdertext","isPassword","changetextinput","numberCharacter","preventDefault","type","maxLength","undefined","EntityGroupCreation","useState","InputFieldList","inputFieldInfo","setInputFieldInfo","alertMessage","setAlertMessage","isSuccessAlert","setIsSuccessAlert","isLoadingAdd","setIsLoadingAdd","isInputError","setIsInputError","useSelector","state","rEntityGroupList","listEntityGroup","loginInfo","rLogin","dispatch","useDispatch","navigation","useNavigate","user","RoutePath","apiCallForGetEntityGroupList","onChangeTextInput","arrInput","Row","Col","xxl","lg","sm","label","lable","key","isRequire","errMsg","renderInputField","dictRequBody","isValideInput","forEach","ApiEntityGroup","apiCallForAddNewEntityGroup","token","idToken","then","res","catch","err","React","ref","as","bsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","spans","classes","brkPoint","span","offset","order","propValue","infix","push","classNames","useCol","colProps","Component","_jsx","displayName","decoratedBsPrefix","sizePrefix","cols"],"sourceRoot":""}