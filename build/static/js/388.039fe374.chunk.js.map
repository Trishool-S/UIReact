{"version":3,"file":"static/js/388.039fe374.chunk.js","mappings":"iMAIe,SAASA,EAAaC,GACnC,IAAQC,EAA4CD,EAA5CC,UAAWC,EAAiCF,EAAjCE,QAASC,EAAwBH,EAAxBG,YAAaC,EAAWJ,EAAXI,QAMzCC,EAAAA,EAAAA,YAAU,WACJH,EAAQI,OAAS,GACnBC,YAAW,WACTJ,MACC,OAEJ,CAACD,EAASC,IAMb,IAAMK,EAAkB,WACtB,OAAIP,EACK,UAEA,UAWX,OACE,SAACQ,EAAA,EAAD,CAEEC,QAASF,IACTG,KAAMT,EAAQI,OAAS,EACvBM,UAXER,GAAUA,EAAOE,OAAS,EACtB,iBAAN,OAAwBF,GAEpB,gBASJS,YAAY,EALd,mBAOMX,IANCM,O,sPCrCI,SAASM,EAAcd,GACpC,IAAQe,EAAsBf,EAAtBe,UAAWX,EAAWJ,EAAXI,OASnB,OACE,gBAAKQ,UAPDR,GAAUA,EAAOE,OAAS,EACtB,GAAN,OAAUF,GAEL,GAIP,UACE,SAAC,EAAAY,WAAD,CAAYC,KAAM,GAAIC,MAAM,UAAUC,QAASJ,MCZtC,SAASK,EAAapB,GACnC,IAAQqB,EAAmCrB,EAAnCqB,MAAOC,EAA4BtB,EAA5BsB,gBAAiBlB,EAAWJ,EAAXI,OAgBhC,OACE,mBAAQQ,UAVJR,GAAUA,EAAOE,OAAS,EACtB,aAAN,OAAoBF,GAEhB,YAO6BmB,QAASD,EAA5C,mBACMD,K,eCTK,SAASG,EAAexB,GACrC,IACEyB,EAMEzB,EANFyB,SACAC,EAKE1B,EALF0B,UACAC,EAIE3B,EAJF2B,QACAC,EAGE5B,EAHF4B,YACAC,EAEE7B,EAFF6B,aACAC,EACE9B,EADF8B,aA6BIC,EAAmB,SAACC,GACxBF,EAAaE,IAGf,OACE,UAACC,EAAA,EAAD,CAAUrB,UAAU,GAApB,WACE,SAACqB,EAAA,SAAD,CAAiBC,GAAG,0BAApB,SAC2B,kBAAjBL,EACJA,EAAa,CAACH,IACdG,KAEN,UAACI,EAAA,OAAD,WAzBsB,WACxB,GAAIL,EACF,OACE,SAACK,EAAA,OAAD,CACEV,QAAS,kBAAMQ,EAAiBH,IAEhCO,SAAUP,EAHZ,SAKGA,GAHIA,GAqBNQ,GArCEX,EAASY,KAAI,SAACC,EAAMC,GAAP,OAClB,SAACN,EAAA,OAAD,CACEV,QAAS,kBAAMQ,EAAiBO,IAEhCH,SAA8B,kBAAbV,EAAwBa,EAAK,CAACX,IAAYW,EAH7D,SAKuB,kBAAbb,EAAwBa,EAAK,CAACZ,IAAcY,GAH/CC,Y,ivZCxBE,SAASC,EAAuBxC,GAC7C,IAAQyC,EAAuCzC,EAAvCyC,iBAAkBC,EAAqB1C,EAArB0C,iBAU1B,OACE,gBAAK9B,UAAU,cAAf,UACE,mBACE+B,SAAU,SAACX,GAAD,OAAOU,EAAiBV,EAAEY,OAAOC,QAC3CA,MAAOJ,EACPK,KAAK,WACLZ,GAAG,WAJL,SAVKa,EAAAA,KAAiB,SAACT,EAAMC,GAAP,OACtB,mBAEEM,MAAOP,EAAKU,UAFd,mBAGKV,EAAKQ,KAHV,YAGkBR,EAAKU,YAFhBT,Y,2FCQE,SAASU,EAAgBjD,GACtC,IACE6C,EAOE7C,EAPF6C,MACAK,EAMElD,EANFkD,MACAC,EAKEnD,EALFmD,gBACAC,EAIEpD,EAJFoD,WACAC,EAGErD,EAHFqD,gBACAjD,EAEEJ,EAFFI,OACAkD,EACEtD,EADFsD,gBAiBF,OACE,kBACE1C,UAXER,GAAUA,EAAOE,OAAS,EACtB,aAAN,OAAoBF,GAEhB,YASJwB,YAAauB,EACbN,MAAOA,EACPF,SAAU,SAACX,GACTA,EAAEuB,iBACFF,EAAgBrB,EAAEY,OAAOC,QAE3BX,GAAIgB,EACJM,MAAqB,IAAfJ,EAAsB,WAAa,OACzCK,eAA+BC,IAApBJ,EAAgCA,EAAkB,O,8OC1B7DvD,GAAe4D,EAAAA,EAAAA,OAAK,kBACxB,2CAgOF,MA7NA,WAIE,OAAgCC,EAAAA,EAAAA,UAC9B,sCADF,eAAOC,EAAP,KAAiBC,EAAjB,KAGA,GAAsCF,EAAAA,EAAAA,UAAS,iBAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,IAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KACA,GAAwCR,EAAAA,EAAAA,UAAS,IAAjD,eAAOS,EAAP,KAAqBC,EAArB,MAEAjE,EAAAA,EAAAA,YAAU,YAORkE,EAAAA,EAAAA,IAAmB,EAAG,OAAQ,UAC7B,IAKH,IAAMC,GAAWC,EAAAA,EAAAA,MAKXC,EAAmB,WAKvB,IAAMC,ECzDmB,SAACd,EAAUE,EAAaE,GACnD,IAAIW,EAAa,GAQjB,OAPIf,EAASgB,QAAQ,KAAM,IAAIvE,QAAU,EACvCsE,EAAa,qBACJb,EAAYc,QAAQ,KAAM,IAAIvE,QAAU,EACjDsE,EAAa,yBAC4B,KAAhCE,EAAAA,EAAAA,IAAgBb,KACzBW,EAAa,0BAERA,EDgDgBG,CACnBlB,EACAE,EACAE,GAEF,GAAIU,EAAarE,QAAU,EAAG,CAC5B8D,GAAY,GACZ,IAAIY,EAAO,CACTC,MAAOpB,EACPqB,SAAUnB,IAEZoB,EAAAA,EAAAA,IAAyBH,GACtBI,MAAK,SAACC,GACLjB,GAAY,GACZI,GAASc,EAAAA,EAAAA,IAAwBD,IACjCE,OAAOC,SAASC,YAEjBC,OAAM,SAACC,GACNvB,GAAY,GACZE,EAAgBqB,WAMpBrB,EAAgBK,IA8EpB,OACE,gBAAK/D,UAAU,aAAf,UACE,SAAC,KAAD,CAAcgF,OAAK,EAAChF,UAAU,oBAA9B,UAEE,UAAC,KAAD,YAEE,SAAC,KAAD,WACE,gBAAKiF,IAAKC,EAAclF,UAAU,YAAYmF,IAAI,oBAGpD,SAAC,KAAD,WACE,iBAAKnF,UAAU,YAAf,WACE,gBAAKA,UAAU,4DAAf,UACE,eAAIA,UAAU,YAAd,wBAjFV,UAAC,EAAAoF,SAAD,YACE,SAAC,KAAD,CACEnD,MAAOgB,EACPR,gBAAiB,SAACrB,GAAD,OAAO8B,EAAY9B,IACpCkB,MAAM,WACNC,gBAAgB,QAChB/C,OAAO,iBAET,SAAC,KAAD,CACEyC,MAAOkB,EACPV,gBAAiB,SAACrB,GAAD,OAAOgC,EAAehC,IACvCkB,MAAM,cACNC,gBAAgB,WAChBC,YAAY,EACZhD,OAAO,oBA6CX,gBAAKQ,UAAU,cAAf,UACE,SAAC,KAAD,OAyBM,SAAC,KAAD,CACEiC,MAAOoB,EACPZ,gBAAiB,SAACrB,GAAD,OAAOkC,EAAclC,IACtCkB,MAAM,gBACNC,gBAAgB,gBAChBC,YAAY,EACZhD,OAAO,cACPkD,gBAAiB,IAClBa,IACC,SAAC,KAAD,CAAe/D,OAAO,gBAAgBW,UAAWoD,KApE3D,SAACpE,EAAD,CACEE,WAAW,EACXC,QAASmE,EACTlE,YAAa,kBAAMmE,EAAgB,KACnClE,OAAO,qBAOT,SAAC,EAAA4F,SAAD,WACI7B,IACA,SAAC,KAAD,CACE/D,OAAO,YACPkB,gBAAiBoD,EACjBrD,MAAM,2B","sources":["app/components/common/alert-message-box/index.js","app/components/common/spinner/index.js","app/components/common/button/index.js","app/components/common/dropdown/index.js","app/components/common/dial-code-select/index.js","app/components/common/input/index.js","app/container/auth/login/index.js","app/container/auth/login/login-presenter.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport \"./alert.style.scss\";\r\n\r\nexport default function AlertMessage(props) {\r\n  const { isSuccess, message, onHideAlert, styles } = props;\r\n\r\n  /**\r\n   * hide alert after 5 sec\r\n   * pass hide alert props for clear message\r\n   */\r\n  useEffect(() => {\r\n    if (message.length > 0) {\r\n      setTimeout(() => {\r\n        onHideAlert();\r\n      }, 4000);\r\n    }\r\n  }, [message, onHideAlert]);\r\n\r\n  /**\r\n   * get alert varient like success or error\r\n   * @returns\r\n   */\r\n  const getAlertVariant = () => {\r\n    if (isSuccess) {\r\n      return \"success\";\r\n    } else {\r\n      return \"danger\";\r\n    }\r\n  };\r\n\r\n  const customStyle = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `alert-message ${styles}`;\r\n    }\r\n    return `alert-message`;\r\n  };\r\n\r\n  return (\r\n    <Alert\r\n      key={getAlertVariant()}\r\n      variant={getAlertVariant()}\r\n      show={message.length > 0 ? true : false}\r\n      className={customStyle()}\r\n      transition={false}\r\n    >\r\n      {`${message}`}\r\n    </Alert>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function CommonSpinner(props) {\r\n  const { isLoading, styles } = props;\r\n\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `${styles}`;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={customStyles()}>\r\n      <ClipLoader size={30} color=\"#2e8de6\" loading={isLoading} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./button.style.scss\";\r\n\r\nexport default function CommonButton(props) {\r\n  const { title, onClickedButton, styles } = props;\r\n\r\n  /**\r\n   * add custom style if get styles from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `btn-style ${styles}`;\r\n    }\r\n    return `btn-style`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <button className={customStyles()} onClick={onClickedButton}>\r\n      {`${title}`}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\n/**\r\n * This is common dropdown menu\r\n * you have to pass array for dropdown item\r\n * pass kItemName and kItemId if have object of array otherwise pass dont pass\r\n * placeholder\r\n * selectedItem\r\n * onSelectItem\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonDropDown(props) {\r\n  const {\r\n    listItem,\r\n    kItemName,\r\n    kItemId,\r\n    placeholder,\r\n    selectedItem,\r\n    onSelectItem,\r\n  } = props;\r\n\r\n  const renderDropdownItem = () => {\r\n    return listItem.map((item, index) => (\r\n      <Dropdown.Item\r\n        onClick={() => onSelectDropdown(item)}\r\n        key={index}\r\n        eventKey={typeof listItem === \"object\" ? item[[kItemId]] : item}\r\n      >\r\n        {typeof listItem === \"object\" ? item[[kItemName]] : item}\r\n      </Dropdown.Item>\r\n    ));\r\n  };\r\n\r\n  const renderPlaceholder = () => {\r\n    if (placeholder) {\r\n      return (\r\n        <Dropdown.Item\r\n          onClick={() => onSelectDropdown(placeholder)}\r\n          key={placeholder}\r\n          eventKey={placeholder}\r\n        >\r\n          {placeholder}\r\n        </Dropdown.Item>\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSelectDropdown = (e) => {\r\n    onSelectItem(e);\r\n  };\r\n\r\n  return (\r\n    <Dropdown className=\"\">\r\n      <Dropdown.Toggle id=\"dropdown-autoclose-true\">\r\n        {typeof selectedItem === \"object\"\r\n          ? selectedItem[[kItemName]]\r\n          : selectedItem}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {renderPlaceholder()}\r\n        {renderDropdownItem()}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n/***\r\n * Example\r\n * const renderAssetDropdown = () => {\r\n    return (\r\n      <div>\r\n        <label>Asset</label>\r\n        <CommonDropDown\r\n          listItem={[\r\n            { name: \"mumbai\", id: \"1\" },\r\n            { name: \"gujarat\", id: \"2\" },\r\n          ]}\r\n          kItemName=\"name\"\r\n          kItemId=\"id\"\r\n          placeholder=\"--ALL--\"\r\n          selectedItem={selectedAsset}\r\n          onSelectItem={(e) => setSelectedAsset(e)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n */\r\n","import React from \"react\";\r\nimport ListDialCode from \"../../../constants/dial-code.json\";\r\n\r\nexport default function CommonDialCodeSelector(props) {\r\n  const { selectedDialCode, onChangeDialCode } = props;\r\n  const renderOptionList = () => {\r\n    return ListDialCode.map((item, index) => (\r\n      <option\r\n        key={index}\r\n        value={item.dial_code}\r\n      >{`${item.name} ${item.dial_code}`}</option>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"countryCode\">\r\n      <select\r\n        onChange={(e) => onChangeDialCode(e.target.value)}\r\n        value={selectedDialCode}\r\n        name=\"dialCode\"\r\n        id=\"dialCode\"\r\n      >\r\n        {renderOptionList()}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./input.style.scss\";\r\n\r\n/**\r\n * common text input\r\n * pass below param\r\n * 1. value\r\n * 2. changetextinput\r\n * 3. txtId\r\n * 4. placeholdertext\r\n * 5. isPassword\r\n * 6. styles\r\n * 7. numberCharacter\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonTextInput(props) {\r\n  const {\r\n    value,\r\n    txtid,\r\n    placeholdertext,\r\n    isPassword,\r\n    changetextinput,\r\n    styles,\r\n    numberCharacter,\r\n  } = props;\r\n\r\n  /**\r\n   * add custom style if get style from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `txt-input ${styles}`;\r\n    }\r\n    return `txt-input`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <input\r\n      className={customStyles()}\r\n      placeholder={placeholdertext}\r\n      value={value}\r\n      onChange={(e) => {\r\n        e.preventDefault();\r\n        changetextinput(e.target.value);\r\n      }}\r\n      id={txtid}\r\n      type={isPassword === true ? \"password\" : \"text\"}\r\n      maxLength={numberCharacter !== undefined ? numberCharacter : 40}\r\n    />\r\n  );\r\n}\r\n","import React, { useState, lazy, useEffect, Fragment } from \"react\";\r\nimport { apiCallForAuthentication } from \"../../../api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actionUpdateLoginStatus } from \"../../../store/reducer/login-reducer\";\r\nimport {\r\n  CommonButton,\r\n  CommonSpinner,\r\n  CommonTextInput,\r\n} from \"../../../components/common\";\r\nimport { checkFieldValidation } from \"./login-presenter\";\r\nimport { loadCaptchaEnginge, LoadCanvasTemplate } from \"react-simple-captcha\";\r\nimport {\r\n  MDBContainer,\r\n  MDBCol,\r\n  MDBRow,\r\n  MDBBtn,\r\n  MDBIcon,\r\n  MDBInput,\r\n  MDBCheckbox\r\n}\r\n  from 'mdb-react-ui-kit';\r\nimport DefaultImage from \"../../../assets/images/image111.png\";\r\nimport \"./styles.css\";\r\n\r\n\r\n//alert declration\r\nconst AlertMessage = lazy(() =>\r\n  import(\"../../../components/common/alert-message-box\")\r\n);\r\n\r\nfunction Login() {\r\n  /**\r\n   * state delcaration\r\n   */\r\n  const [txtEmail, setTxtEmail] = useState(\r\n    \"trushit.chauhan+devadmin@gmail.com\"\r\n  );\r\n  const [txtPassword, setTxtPassword] = useState(\"Trushit@12345\");\r\n  const [txtCaptcha, setTxtCaptcha] = useState(\"\");\r\n  const [isLoader, setIsLoader] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * captch init\r\n     * pass number character in captcha\r\n     * background color\r\n     * text color\r\n     */\r\n    loadCaptchaEnginge(6, \"#000\", \"#fff\");\r\n  }, []);\r\n\r\n  /**\r\n   * dispatch\r\n   */\r\n  const dispatch = useDispatch();\r\n\r\n  /**\r\n   * call this function when clicked on login button or submit button\r\n   */\r\n  const btnSubmitClicked = () => {\r\n    /**\r\n     * first we check field validation using checkFieldValidation function\r\n     * api call for login\r\n     */\r\n    const errorMessage = checkFieldValidation(\r\n      txtEmail,\r\n      txtPassword,\r\n      txtCaptcha\r\n    );\r\n    if (errorMessage.length <= 0) {\r\n      setIsLoader(true);\r\n      let dict = {\r\n        email: txtEmail,\r\n        password: txtPassword,\r\n      };\r\n      apiCallForAuthentication(dict)\r\n        .then((res) => {\r\n          setIsLoader(false);\r\n          dispatch(actionUpdateLoginStatus(res));\r\n          window.location.reload();\r\n        })\r\n        .catch((err) => {\r\n          setIsLoader(false);\r\n          setAlertMessage(err);\r\n        });\r\n    } else {\r\n      /**\r\n       * show aler message\r\n       */\r\n      setAlertMessage(errorMessage);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * text input\r\n   * @returns\r\n   */\r\n  const renderTextInputFields = () => {\r\n    return (\r\n      <Fragment>\r\n        <CommonTextInput\r\n          value={txtEmail}\r\n          changetextinput={(e) => setTxtEmail(e)}\r\n          txtid=\"txtEmail\"\r\n          placeholdertext=\"email\"\r\n          styles=\"input-field\"\r\n        />\r\n        <CommonTextInput\r\n          value={txtPassword}\r\n          changetextinput={(e) => setTxtPassword(e)}\r\n          txtid=\"txtPassword\"\r\n          placeholdertext=\"password\"\r\n          isPassword={true}\r\n          styles=\"input-field\"\r\n        />\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * alert message\r\n   * @returns\r\n   */\r\n  const renderAlertMessage = () => {\r\n    return (\r\n      <AlertMessage\r\n        isSuccess={false}\r\n        message={alertMessage}\r\n        onHideAlert={() => setAlertMessage(\"\")}\r\n        styles=\"login-alert-box\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderLoginForgotButton = () => {\r\n    return (\r\n      <Fragment>\r\n        {!isLoader && (\r\n          <CommonButton\r\n            styles=\"btn-login\"\r\n            onClickedButton={btnSubmitClicked}\r\n            title=\"Signin\"\r\n          />\r\n        )}\r\n        {/* forgot password */}\r\n        {/* {!isLoader && (\r\n          <CommonButton\r\n            styles=\"login-forgot-password\"\r\n            onClickedButton={btnSubmitClicked}\r\n            title=\"Forgot Password\"\r\n          />\r\n        )} */}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  const renderCaptch = () => {\r\n    return (\r\n      <div className=\"div-captcha\">\r\n        <LoadCanvasTemplate />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * render main view\r\n   */\r\n  return (\r\n    <div className=\"background\">\r\n      <MDBContainer fluid className=\"p-3 my-5 h-custom\">\r\n\r\n        <MDBRow>\r\n\r\n          <MDBCol>\r\n            <img src={DefaultImage} className=\"img-fluid\" alt=\"Sample image\" />\r\n          </MDBCol>\r\n\r\n          <MDBCol>\r\n            <div className=\"div-login\">\r\n              <div className=\"d-flex flex-row align-items-center justify-content-center\">\r\n                <h1 className=\"txt-login\">Sign in</h1>\r\n              </div>\r\n              {renderTextInputFields()}\r\n              {renderCaptch()}\r\n              <CommonTextInput\r\n                value={txtCaptcha}\r\n                changetextinput={(e) => setTxtCaptcha(e)}\r\n                txtid=\"setTxtCaptcha\"\r\n                placeholdertext=\"enter captcha\"\r\n                isPassword={false}\r\n                styles=\"input-field\"\r\n                numberCharacter={6} />\r\n              {isLoader && (\r\n                <CommonSpinner styles=\"login-spinner\" isLoading={isLoader} />\r\n              )}\r\n              {/* alert message */}\r\n              {renderAlertMessage()}\r\n              {/* login button */}\r\n              {renderLoginForgotButton()}\r\n            </div>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </div>\r\n\r\n    // <>\r\n    //   <MDBContainer fluid className=\"p-3 my-5 h-custom\">\r\n    //     <MDBRow>\r\n    //       <div className=\"col-md-6 d-none d-md-flex\">\r\n    //         <img src={DefaultImage} className=\"img-fluid\" alt=\"Sample image\" />\r\n    //       </div>   \r\n    //       <MDBCol col='10' md='6'>\r\n    //         <div className=\"d-flex flex-row align-items-center justify-content-center\">\r\n    //           <h1 className=\"txt-login\">Signin</h1>\r\n    //         </div>\r\n    //         {/* <div className=\"div-main-login\"> */}\r\n    //         <div className=\"col-md-6 d-none d-md-flex\">\r\n    //           <div className=\"container-page\">\r\n    //             <div className=\"div-login\">\r\n    //               {/* text input email and password */}\r\n    //               {renderTextInputFields()}\r\n    //               {/* captch */}\r\n    //               {renderCaptch()}\r\n    //               {/* </div> */}\r\n    //               <CommonTextInput\r\n    //                 value={txtCaptcha}\r\n    //                 changetextinput={(e) => setTxtCaptcha(e)}\r\n    //                 txtid=\"setTxtCaptcha\"\r\n    //                 placeholdertext=\"enter captcha\"\r\n    //                 isPassword={false}\r\n    //                 styles=\"input-field\"\r\n    //                 numberCharacter={6} />\r\n    //               {/* loader */}\r\n    //               {isLoader && (\r\n    //                 <CommonSpinner styles=\"login-spinner\" isLoading={isLoader} />\r\n    //               )}\r\n    //               {/* alert message */}\r\n    //               {renderAlertMessage()}\r\n    //               {/* login button */}\r\n    //               {renderLoginForgotButton()}\r\n    //             </div>\r\n    //           </div>\r\n    //         </div>\r\n    //       </MDBCol>\r\n    //     </MDBRow>\r\n    //   </MDBContainer>\r\n    // </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import { validateCaptcha } from \"react-simple-captcha\";\r\n\r\n/**\r\n * check input field validation\r\n * @param {*} txtEmail\r\n * @param {*} txtPassword\r\n * @returns\r\n */\r\nconst checkFieldValidation = (txtEmail, txtPassword, txtCaptcha) => {\r\n  let strMessage = \"\";\r\n  if (txtEmail.replace(/ /g, \"\").length <= 0) {\r\n    strMessage = \"Please enter email\";\r\n  } else if (txtPassword.replace(/ /g, \"\").length <= 0) {\r\n    strMessage = \"Please enter password\";\r\n  } else if (validateCaptcha(txtCaptcha) !== true) {\r\n    strMessage = \"Captcha Does Not Match\";\r\n  }\r\n  return strMessage;\r\n};\r\n\r\nexport { checkFieldValidation };\r\n"],"names":["AlertMessage","props","isSuccess","message","onHideAlert","styles","useEffect","length","setTimeout","getAlertVariant","Alert","variant","show","className","transition","CommonSpinner","isLoading","ClipLoader","size","color","loading","CommonButton","title","onClickedButton","onClick","CommonDropDown","listItem","kItemName","kItemId","placeholder","selectedItem","onSelectItem","onSelectDropdown","e","Dropdown","id","eventKey","renderPlaceholder","map","item","index","CommonDialCodeSelector","selectedDialCode","onChangeDialCode","onChange","target","value","name","ListDialCode","dial_code","CommonTextInput","txtid","placeholdertext","isPassword","changetextinput","numberCharacter","preventDefault","type","maxLength","undefined","lazy","useState","txtEmail","setTxtEmail","txtPassword","setTxtPassword","txtCaptcha","setTxtCaptcha","isLoader","setIsLoader","alertMessage","setAlertMessage","loadCaptchaEnginge","dispatch","useDispatch","btnSubmitClicked","errorMessage","strMessage","replace","validateCaptcha","checkFieldValidation","dict","email","password","apiCallForAuthentication","then","res","actionUpdateLoginStatus","window","location","reload","catch","err","fluid","src","DefaultImage","alt","Fragment"],"sourceRoot":""}