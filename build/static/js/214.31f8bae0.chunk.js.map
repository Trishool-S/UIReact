{"version":3,"file":"static/js/214.31f8bae0.chunk.js","mappings":"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","sources":["app/components/common/alert-message-box/index.js","app/components/common/spinner/index.js","app/components/common/button/index.js","app/components/common/dropdown/index.js","app/components/common/dial-code-select/index.js","app/components/common/input/index.js","app/container/create-client-admin/input-data.js","app/container/create-client-admin/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport \"./alert.style.scss\";\r\n\r\nexport default function AlertMessage(props) {\r\n  const { isSuccess, message, onHideAlert, styles } = props;\r\n\r\n  /**\r\n   * hide alert after 5 sec\r\n   * pass hide alert props for clear message\r\n   */\r\n  useEffect(() => {\r\n    if (message.length > 0) {\r\n      setTimeout(() => {\r\n        onHideAlert();\r\n      }, 4000);\r\n    }\r\n  }, [message, onHideAlert]);\r\n\r\n  /**\r\n   * get alert varient like success or error\r\n   * @returns\r\n   */\r\n  const getAlertVariant = () => {\r\n    if (isSuccess) {\r\n      return \"success\";\r\n    } else {\r\n      return \"danger\";\r\n    }\r\n  };\r\n\r\n  const customStyle = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `alert-message ${styles}`;\r\n    }\r\n    return `alert-message`;\r\n  };\r\n\r\n  return (\r\n    <Alert\r\n      key={getAlertVariant()}\r\n      variant={getAlertVariant()}\r\n      show={message.length > 0 ? true : false}\r\n      className={customStyle()}\r\n      transition={false}\r\n    >\r\n      {`${message}`}\r\n    </Alert>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function CommonSpinner(props) {\r\n  const { isLoading, styles } = props;\r\n\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `${styles}`;\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={customStyles()}>\r\n      <ClipLoader size={30} color=\"#2e8de6\" loading={isLoading} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./button.style.scss\";\r\n\r\nexport default function CommonButton(props) {\r\n  const { title, onClickedButton, styles } = props;\r\n\r\n  /**\r\n   * add custom style if get styles from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `btn-style ${styles}`;\r\n    }\r\n    return `btn-style`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <button className={customStyles()} onClick={onClickedButton}>\r\n      {`${title}`}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\n/**\r\n * This is common dropdown menu\r\n * you have to pass array for dropdown item\r\n * pass kItemName and kItemId if have object of array otherwise pass dont pass\r\n * placeholder\r\n * selectedItem\r\n * onSelectItem\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonDropDown(props) {\r\n  const {\r\n    listItem,\r\n    kItemName,\r\n    kItemId,\r\n    placeholder,\r\n    selectedItem,\r\n    onSelectItem,\r\n  } = props;\r\n\r\n  const renderDropdownItem = () => {\r\n    return listItem.map((item, index) => (\r\n      <Dropdown.Item\r\n        onClick={() => onSelectDropdown(item)}\r\n        key={index}\r\n        eventKey={typeof listItem === \"object\" ? item[[kItemId]] : item}\r\n      >\r\n        {typeof listItem === \"object\" ? item[[kItemName]] : item}\r\n      </Dropdown.Item>\r\n    ));\r\n  };\r\n\r\n  const renderPlaceholder = () => {\r\n    if (placeholder) {\r\n      return (\r\n        <Dropdown.Item\r\n          onClick={() => onSelectDropdown(placeholder)}\r\n          key={placeholder}\r\n          eventKey={placeholder}\r\n        >\r\n          {placeholder}\r\n        </Dropdown.Item>\r\n      );\r\n    }\r\n  };\r\n\r\n  const onSelectDropdown = (e) => {\r\n    onSelectItem(e);\r\n  };\r\n\r\n  return (\r\n    <Dropdown className=\"\">\r\n      <Dropdown.Toggle id=\"dropdown-autoclose-true\">\r\n        {typeof selectedItem === \"object\"\r\n          ? selectedItem[[kItemName]]\r\n          : selectedItem}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {renderPlaceholder()}\r\n        {renderDropdownItem()}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\n/***\r\n * Example\r\n * const renderAssetDropdown = () => {\r\n    return (\r\n      <div>\r\n        <label>Asset</label>\r\n        <CommonDropDown\r\n          listItem={[\r\n            { name: \"mumbai\", id: \"1\" },\r\n            { name: \"gujarat\", id: \"2\" },\r\n          ]}\r\n          kItemName=\"name\"\r\n          kItemId=\"id\"\r\n          placeholder=\"--ALL--\"\r\n          selectedItem={selectedAsset}\r\n          onSelectItem={(e) => setSelectedAsset(e)}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n */\r\n","import React from \"react\";\r\nimport ListDialCode from \"../../../constants/dial-code.json\";\r\n\r\nexport default function CommonDialCodeSelector(props) {\r\n  const { selectedDialCode, onChangeDialCode } = props;\r\n  const renderOptionList = () => {\r\n    return ListDialCode.map((item, index) => (\r\n      <option\r\n        key={index}\r\n        value={item.dial_code}\r\n      >{`${item.name} ${item.dial_code}`}</option>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"countryCode\">\r\n      <select\r\n        onChange={(e) => onChangeDialCode(e.target.value)}\r\n        value={selectedDialCode}\r\n        name=\"dialCode\"\r\n        id=\"dialCode\"\r\n      >\r\n        {renderOptionList()}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./input.style.scss\";\r\n\r\n/**\r\n * common text input\r\n * pass below param\r\n * 1. value\r\n * 2. changetextinput\r\n * 3. txtId\r\n * 4. placeholdertext\r\n * 5. isPassword\r\n * 6. styles\r\n * 7. numberCharacter\r\n * @param {*} props\r\n * @returns\r\n */\r\nexport default function CommonTextInput(props) {\r\n  const {\r\n    value,\r\n    txtid,\r\n    placeholdertext,\r\n    isPassword,\r\n    changetextinput,\r\n    styles,\r\n    numberCharacter,\r\n  } = props;\r\n\r\n  /**\r\n   * add custom style if get style from props\r\n   * @returns\r\n   */\r\n  const customStyles = () => {\r\n    if (styles && styles.length > 0) {\r\n      return `txt-input ${styles}`;\r\n    }\r\n    return `txt-input`;\r\n  };\r\n\r\n  /**\r\n   * main\r\n   */\r\n  return (\r\n    <input\r\n      className={customStyles()}\r\n      placeholder={placeholdertext}\r\n      value={value}\r\n      onChange={(e) => {\r\n        e.preventDefault();\r\n        changetextinput(e.target.value);\r\n      }}\r\n      id={txtid}\r\n      type={isPassword === true ? \"password\" : \"text\"}\r\n      maxLength={numberCharacter !== undefined ? numberCharacter : 40}\r\n    />\r\n  );\r\n}\r\n","export const inputData = [\r\n  {\r\n    lable: \"Name\",\r\n    key: \"name\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter name\",\r\n  },\r\n  {\r\n    lable: \"Email\",\r\n    key: \"email\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter Email\",\r\n  },\r\n  {\r\n    lable: \"Address\",\r\n    key: \"address\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter address\",\r\n  },\r\n  {\r\n    lable: \"Logo(URL)\",\r\n    key: \"logo\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter logo url\",\r\n  },\r\n  {\r\n    lable: \"Banner(URL)\",\r\n    key: \"banner\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter banner url\",\r\n  },\r\n];\r\n\r\nexport const adminUserInput = [\r\n  {\r\n    lable: \"First Name\",\r\n    key: \"firstName\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter first name\",\r\n  },\r\n  {\r\n    lable: \"Last Name\",\r\n    key: \"lastName\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter last name\",\r\n  },\r\n  {\r\n    lable: \"Email\",\r\n    key: \"email\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter Email\",\r\n  },\r\n  {\r\n    lable: \"Phone Number\",\r\n    key: \"phoneNumber\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter phone Number with dial code\",\r\n  },\r\n];\r\n\r\nexport const adminEntityInput = [\r\n  {\r\n    lable: \"Name\",\r\n    key: \"name\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter name\",\r\n  },\r\n  {\r\n    lable: \"Type\",\r\n    key: \"type\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter type\",\r\n  },\r\n  {\r\n    lable: \"Latitude\",\r\n    key: \"latitude\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter latitude\",\r\n  },\r\n  {\r\n    lable: \"Longitude\",\r\n    key: \"longitude\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter longitude\",\r\n  },\r\n  {\r\n    lable: \"Contact No\",\r\n    key: \"contactNo\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter contactNo\",\r\n  },\r\n  {\r\n    lable: \"Contact Email\",\r\n    key: \"contactEmail\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter contact Email\",\r\n  },\r\n  {\r\n    lable: \"Description1\",\r\n    key: \"description1\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter description1\",\r\n  },\r\n  {\r\n    lable: \"Description2\",\r\n    key: \"description2\",\r\n    value: \"\",\r\n    isRequire: true,\r\n    errMsg: \"Please enter description2\",\r\n  },\r\n  {\r\n    lable: \"Eligible For Access\",\r\n    key: \"eligibleForAccess\",\r\n    value: false,\r\n    isRequire: true,\r\n    errMsg: \"Please enter eligible For Access\",\r\n    type: \"switch\",\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ApiClient } from \"../../api/client\";\r\nimport {\r\n  CommonButton,\r\n  CommonDialCodeSelector,\r\n  CommonSpinner,\r\n} from \"../../components/common\";\r\nimport CommonTextInput from \"../../components/common/input\";\r\nimport { inputData, adminEntityInput, adminUserInput } from \"./input-data\";\r\nimport { Row, Col, Modal } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { RoutePath } from \"../../routes/route-path\";\r\nimport AlertMessage from \"../../components/common/alert-message-box\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { validateEmail } from \"../../utils\";\r\n\r\nexport default function CreateClientAdmin() {\r\n  const [listInputInfo, setListInputInfo] = useState(inputData);\r\n  const [listInputAdminUser, setListInputAdminUser] = useState(adminUserInput);\r\n  const [listInputAdminEntity, setListInputAdminEntity] =\r\n    useState(adminEntityInput);\r\n  const [isInputError, setIsInputError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n  const [txtPassword, setTxtPassword] = useState(\"\");\r\n  const [txtEmail, setTxtEmail] = useState(\"\");\r\n  const [isCopy, setIsCopy] = useState(false);\r\n  const [selectedPhoneNo, setSelectedPhoneNo] = useState(\"+91\");\r\n  const [selectedContactNo, setSelectedContactNo] = useState(\"+91\");\r\n\r\n  //use selector\r\n  const { loginInfo } = useSelector((state) => state.rLogin);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n  const [isSuccessAlert, setIsSuccessAlert] = useState(false);\r\n\r\n  //navigation\r\n  const navigation = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (loginInfo && loginInfo.user.type === \"ClientAdmin\") {\r\n      navigation(RoutePath.dashboard);\r\n      return;\r\n    }\r\n  }, []);\r\n\r\n  const renderInputField = () => {\r\n    return listInputInfo.map((item, index) => (\r\n      <div key={index} className=\"div-input-create-client\">\r\n        <label className=\"lbl-create-title\">{item.lable}</label>\r\n        <CommonTextInput\r\n          placeholdertext={item.lable}\r\n          value={item.value}\r\n          changetextinput={(e) => onChangeTextInput(e, index, 1)}\r\n          id={item.key}\r\n          isPassword={item.key === \"password\" ? true : false}\r\n        />\r\n        {isInputError && item.isRequire && item.value.length <= 0 && (\r\n          <p className=\"input-error-msg\">{`${item.errMsg}`}</p>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderAdminUserInputField = () => {\r\n    return listInputAdminUser.map((item, index) => (\r\n      <div key={index} className=\"div-input-create-client\">\r\n        <label className=\"lbl-create-title\">{item.lable}</label>\r\n        {item.key === \"phoneNumber\" && (\r\n          <CommonDialCodeSelector\r\n            selectedDialCode={selectedPhoneNo}\r\n            onChangeDialCode={(e) => setSelectedPhoneNo(e)}\r\n          />\r\n        )}\r\n        <CommonTextInput\r\n          placeholdertext={item.lable}\r\n          value={item.value}\r\n          changetextinput={(e) => onChangeTextInput(e, index, 2)}\r\n          id={item.key}\r\n          isPassword={item.key === \"password\" ? true : false}\r\n        />\r\n        {isInputError && item.isRequire && item.value.length <= 0 && (\r\n          <p className=\"input-error-msg\">{`${item.errMsg}`}</p>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderAdminEntityInputField = () => {\r\n    return listInputAdminEntity.map((item, index) => (\r\n      <div key={index} className=\"div-input-create-client\">\r\n        <label className=\"lbl-create-title\">{item.lable}</label>\r\n        {item.key === \"contactNo\" && (\r\n          <CommonDialCodeSelector\r\n            selectedDialCode={selectedContactNo}\r\n            onChangeDialCode={(e) => setSelectedContactNo(e)}\r\n          />\r\n        )}\r\n        {item.type && item.type === \"switch\" ? (\r\n          <div className=\"inputBox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              onChange={(e) => onChangeTextInput(!item.value, index, 3)}\r\n            />\r\n            <label>Allow</label>\r\n          </div>\r\n        ) : (\r\n          <CommonTextInput\r\n            placeholdertext={item.lable}\r\n            value={item.value}\r\n            changetextinput={(e) => onChangeTextInput(e, index, 3)}\r\n            id={item.key}\r\n            isPassword={item.key === \"password\" ? true : false}\r\n          />\r\n        )}\r\n        {isInputError && item.isRequire && item.value.length <= 0 && (\r\n          <p className=\"input-error-msg\">{`${item.errMsg}`}</p>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const onChangeTextInput = (value, index, listType) => {\r\n    let arrInput = [];\r\n    if (listType === 1) {\r\n      arrInput = [...listInputInfo];\r\n    } else if (listType === 2) {\r\n      arrInput = [...listInputAdminUser];\r\n    } else if (listType === 3) {\r\n      arrInput = [...listInputAdminEntity];\r\n    }\r\n    let info = arrInput[index];\r\n    info.value = value;\r\n    if (listType === 1) {\r\n      setListInputInfo(arrInput);\r\n    } else if (listType === 2) {\r\n      setListInputAdminUser(arrInput);\r\n    } else if (listType === 3) {\r\n      setListInputAdminEntity(arrInput);\r\n    }\r\n  };\r\n\r\n  const renderModalSuccessClient = () => {\r\n    if (isShowModal) {\r\n      return (\r\n        <Modal\r\n          show={isShowModal}\r\n          onHide={() => {\r\n            navigation(RoutePath.dashboard);\r\n          }}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Success</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            Client Created Successfully!\r\n            <div>\r\n              <label>\r\n                Email: <strong>{txtEmail}</strong>\r\n              </label>\r\n              <p>\r\n                Password: <strong>{txtPassword}</strong>\r\n              </p>\r\n            </div>\r\n            <button\r\n              onClick={() => {\r\n                setIsCopy(true);\r\n                copy(txtPassword);\r\n                setTimeout(() => {\r\n                  setIsCopy(false);\r\n                }, 3000);\r\n              }}\r\n              className={\r\n                isCopy\r\n                  ? \"copy-password-btn copy-password-btn-active\"\r\n                  : \"copy-password-btn\"\r\n              }\r\n            >\r\n              Click here to Copy Password\r\n            </button>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <CommonButton\r\n              onClickedButton={() => navigation(RoutePath.dashboard)}\r\n              title=\"Continue\"\r\n              styles=\"btn-create-submit\"\r\n            />\r\n          </Modal.Footer>\r\n        </Modal>\r\n      );\r\n    }\r\n  };\r\n\r\n  const btnSubmitClicked = () => {\r\n    if (!isLoading) {\r\n      let dictRequBody = {};\r\n      let isValideInput = true;\r\n      listInputInfo.forEach((item) => {\r\n        if (item.key === \"email\") {\r\n          if (!validateEmail(item.value)) {\r\n            setIsSuccessAlert(false);\r\n            setAlertMessage(\r\n              \"Please enter correct email in Client Info section\"\r\n            );\r\n            return;\r\n          }\r\n        }\r\n        dictRequBody[item.key] = item.value;\r\n        if (item.isRequire && item.value.length <= 0) {\r\n          isValideInput = false;\r\n        }\r\n      });\r\n\r\n      let dictAdminUser = {};\r\n      listInputAdminUser.forEach((item) => {\r\n        if (item.key === \"phoneNumber\") {\r\n          dictAdminUser[item.key] = `${selectedPhoneNo}${item.value}`;\r\n        } else {\r\n          if (item.key === \"email\") {\r\n            if (!validateEmail(item.value)) {\r\n              setIsSuccessAlert(false);\r\n              setAlertMessage(\r\n                \"Please enter correct email in Admin Client section\"\r\n              );\r\n              return;\r\n            }\r\n          }\r\n          dictAdminUser[item.key] = item.value;\r\n        }\r\n\r\n        if (item.isRequire && item.value.length <= 0) {\r\n          isValideInput = false;\r\n        }\r\n      });\r\n\r\n      dictRequBody[\"adminUser\"] = dictAdminUser;\r\n\r\n      let dictAdminEntity = {};\r\n      listInputAdminEntity.forEach((item) => {\r\n        if (item.key === \"contactNo\") {\r\n          dictAdminEntity[item.key] = `${selectedContactNo}${item.value}`;\r\n        } else {\r\n          if (item.key === \"email\") {\r\n            if (!validateEmail(item.value)) {\r\n              setIsSuccessAlert(false);\r\n              setAlertMessage(\r\n                \"Please enter correct email in Admin Entity section\"\r\n              );\r\n              return;\r\n            }\r\n          }\r\n          dictAdminEntity[item.key] = item.value;\r\n        }\r\n\r\n        if (item.isRequire && item.value.length <= 0) {\r\n          isValideInput = false;\r\n        }\r\n      });\r\n\r\n      dictRequBody[\"adminEntity\"] = dictAdminEntity;\r\n\r\n      if (!isValideInput) {\r\n        setIsInputError(true);\r\n        return;\r\n      }\r\n      setIsInputError(false);\r\n      setIsLoading(true);\r\n      ApiClient()\r\n        .apiCallForAddNewClient(dictRequBody, loginInfo.token.idToken)\r\n        .then((res) => {\r\n          setIsLoading(false);\r\n          setIsSuccessAlert(true);\r\n          setAlertMessage(\"Client Created Successfully\");\r\n          setTxtPassword(res.password);\r\n          setTxtEmail(res.client.email);\r\n          setIsShowModal(true);\r\n        })\r\n        .catch((err) => {\r\n          setIsLoading(false);\r\n          setIsSuccessAlert(false);\r\n          setAlertMessage(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const renderHeaderTitle = (strTitle) => {\r\n    return <h4>{strTitle}</h4>;\r\n  };\r\n\r\n  const renderAlertMessage = () => {\r\n    return (\r\n      <AlertMessage\r\n        isSuccess={isSuccessAlert}\r\n        message={alertMessage}\r\n        onHideAlert={() => setAlertMessage(\"\")}\r\n        styles=\"login-alert-box\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"div-dashboard\">\r\n      <h2 className=\"headingAll mt-4 mb-0\">Create New Client</h2>\r\n      <div className=\"div-create-client-inner\">\r\n        <Row>\r\n          <Col xxl={6} lg={6} sm={12} className=\"my-2\">\r\n            <div className=\"formOne\">\r\n              {renderHeaderTitle(\"Client Info\")}\r\n              {renderInputField()}\r\n            </div>\r\n          </Col>\r\n          <Col xxl={6} lg={6} sm={12} className=\"my-2\">\r\n            <div className=\"formOne\">\r\n              {renderHeaderTitle(\"Admin Client Info\")}\r\n              {renderAdminUserInputField()}\r\n            </div>\r\n          </Col>\r\n          <Col xxl={12} lg={12} sm={12} className=\"my-2\">\r\n            <div className=\"formOne\">\r\n              {renderHeaderTitle(\"Admin Entity Info\")}\r\n              {renderAdminEntityInputField()}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        {renderAlertMessage()}\r\n        {!isLoading && (\r\n          <CommonButton\r\n            onClickedButton={btnSubmitClicked}\r\n            title=\"Submit\"\r\n            styles=\"btn-create-submit\"\r\n          />\r\n        )}\r\n        {isLoading && (\r\n          <CommonSpinner styles=\"btn-spinner\" isLoading={isLoading} />\r\n        )}\r\n      </div>\r\n      {renderModalSuccessClient()}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["AlertMessage","props","isSuccess","message","onHideAlert","styles","useEffect","length","setTimeout","getAlertVariant","Alert","variant","show","className","transition","CommonSpinner","isLoading","ClipLoader","size","color","loading","CommonButton","title","onClickedButton","onClick","CommonDropDown","listItem","kItemName","kItemId","placeholder","selectedItem","onSelectItem","onSelectDropdown","e","Dropdown","id","eventKey","renderPlaceholder","map","item","index","CommonDialCodeSelector","selectedDialCode","onChangeDialCode","onChange","target","value","name","ListDialCode","dial_code","CommonTextInput","txtid","placeholdertext","isPassword","changetextinput","numberCharacter","preventDefault","type","maxLength","undefined","inputData","lable","key","isRequire","errMsg","adminUserInput","adminEntityInput","CreateClientAdmin","useState","listInputInfo","setListInputInfo","listInputAdminUser","setListInputAdminUser","listInputAdminEntity","setListInputAdminEntity","isInputError","setIsInputError","setIsLoading","isShowModal","setIsShowModal","txtPassword","setTxtPassword","txtEmail","setTxtEmail","isCopy","setIsCopy","selectedPhoneNo","setSelectedPhoneNo","selectedContactNo","setSelectedContactNo","loginInfo","useSelector","state","rLogin","alertMessage","setAlertMessage","isSuccessAlert","setIsSuccessAlert","navigation","useNavigate","user","RoutePath","onChangeTextInput","listType","arrInput","renderHeaderTitle","strTitle","Row","Col","xxl","lg","sm","dictRequBody","isValideInput","forEach","validateEmail","dictAdminUser","dictAdminEntity","ApiClient","apiCallForAddNewClient","token","idToken","then","res","password","client","email","catch","err","Modal","onHide","closeButton","copy","renderModalSuccessClient"],"sourceRoot":""}